export function getLines<T extends string>(input: string): T[]
  lines := input.split '\n'
  lines.pop() if lines.-1 is ''
  lines as T[]

export function getNumbers(input: string, char: string = `,`): number[]
  lines := getLines input
  lines# is 1
    ? lines.0.split char |> .map +&
    : lines.map +&

export function getArray2d<T extends string>(
  input: string,
  splitBy = ''
): T[][]
  getLines(input).map &.split(splitBy) as T[]

export function asc(a: any, b: any): number
  a - b

export function desc(a: any, b: any): number
  b - a

export function inRange(min: number, value: number, max: number): boolean 
  min <= value <= max

export function getManhattanDistance(
  a: Point,
  b: Point = x: 0, y: 0
): number
  Math.abs(a.x - b.x) + Math.abs(a.y - b.y)

export function getDistance(a: Point, b: Point): number
  Math.hypot a.x - b.x, a.y - b.y

export function match<
  Variant extends PropertyKey,
  Options extends Record<Variant, () => any>
>(variant: Variant, options: Options): ReturnType<Options[Variant]>
  options[variant]()

export function getColumn<T>(array: T[][], columnNumber: number): T[]
  for row of array
    row[columnNumber]

export function loop2d<T>(
  array: T[][],
  callback: ({y, x}: Point, item: T) => void
): void
  for y of [0...array#]
    for x of [0...array[y]!#]
      callback {y, x}, array[y]![x]!

export function toNumber(str: string): number 
  +(str.match(/\-?\d+((.|,)\d+)?/)?.[0] or '')

export function toNumbers(str: string): number[]
  (str.match(/\-?\d+(\.\d+)?/g) ?? []).map +&

export function divisible(a: number, b: number): boolean
  a % b is 0

/** Greatest common divisor */
export function getGcd(a: number, b: number): number 
  !b ? a : getGcd(b, a % b)

/** Least Common Multiple */
export function getLcm(a: number[]): number
export function getLcm(a: number, b: number): number
export function getLcm(a: number | number[], b?: number): number
 return Array.isArray(a)
    ? a.reduce getLcm, 1
    : // @ts-ignore
      a * (b / getGcd a, b)

export function adjacentPoints<T>(arr: T[][], {x, y}: Point)
  [
    item: arr[y - 1]?.[x]
    x: x,
    y: y - 1
  ,
    item: arr[y - 1]?.[x + 1]
    x: x + 1,
    y: y - 1
  ,
    item: arr[y - 1]?.[x - 1]
    x: x - 1,
    y: y - 1
  ,
    item: arr[y + 1]?.[x]
    x: x,
    y: y + 1
  ,
    item: arr[y + 1]?.[x + 1]
    x: x + 1,
    y: y + 1
  ,
    item: arr[y + 1]?.[x - 1]
    x: x - 1,
    y: y + 1
  ,
    item: arr[y][x - 1]
    x: x - 1,
    y: y
  ,
    item: arr[y][x + 1]
    x: x + 1,
    y: y
  ]

export function toKeys<Item, Key extends string>(...keys: Key[])
  function (item: Item[]) 
    obj := {} as Record<Key, Item>
    for i of [0...keys#]
      obj[keys[i]] = item[i]
    obj

export function printArray(arr: any[], empty = '.'): void
  for y of [0...arr#]
    for x of [0...arr[y]!#]
      process.stdout.write arr[y]![x] ?? empty
    console.log()

export function createArray<T>(y: number, x: number, filler: T): T[][]
  new Array(y).fill(0).map
    () => new Array(x).fill filler

export function exhaustiveCheck(arg: never): void
  arg;

export function isPoint (arg: any): arg is Point
  arg and arg.x <? 'number' and arg.y <? 'number'


export function isPoint3d (arg: any): arg is Point3d
  arg and arg.x <? 'number' and arg.y <? 'number' and arg.z <? 'number'

export function log (...args: any[]): void
  console.log ...args

export function int (nr: string | boolean | number): number
  if nr <? "boolean"
    return nr ? 1 : 0
  if nr <? "string"
    return parseInt nr
  return parseInt `${nr}`

export function float (nr: string): number
  parseFloat nr

export function multiply(arr: number[]): number
  arr.reduce (a, b) => a * b

counterMem: Record<string, Record<string, number>> := {}
export function counter(arr: any[]): Record<string, number>
  key := arr.join ''
  return counterMem[key] if key in counterMem

  obj: Record<string, number> := {}
  (obj[c] ?= 0)++ for c of arr

  counter := new Proxy obj, {
    get (target, prop: string)
      prop in target ? target[prop] : 0
  }

  counterMem[key] = counter

export function rotate<T>(arr: T[][]): T[][]
  arr.0.map (_, i) => arr.map((row) => row[i]).reverse()

export function rotateClockwise<T>(arr: T[][]): T[][]
  arr.0.map (_, i) => arr.map((row) => row[row# - 1 - i])

export function abs(nr: number): number
  Math.abs nr

export function sumLoop2d<T>(
  array: T[][],
  callback: ({y, x}: Point, item: T) => Parameters<typeof int>[0]
): number
  for sum y of [0...array#]
    for sum x of [0...array[y]!#]
      int callback {x, y}, array[y]![x]!

export function permutations(chars: string, length: number = chars#): string[]
  return [''] if length <= 0
  flatten for combo of permutations chars, length - 1
    for ch of chars
      combo + ch

export function getGridPoint<T>(grid: T[][], point: Point): T
  grid[point.y]?.[point.x]

export function adjacentCross<T>(grid: T[][], {x, y}: Point)
  [
    {x, y: y - 1, value: grid[y - 1]?.[x]},
    {x: x + 1, y, value: grid[y]?.[x + 1]},
    {x, y: y + 1, value: grid[y + 1]?.[x]},
    {x: x - 1, y, value: grid[y]?.[x - 1]},
  ]

export function isInteger(nr: any): boolean
  Number.isInteger nr
